<?php
/**
 * @file
 * Renderer cache module.
 */

/**
 * Implements hook_boot().
 */
function render_boost_boot() {
  $config = render_boost_settings();
  global $_render_boost_devel;
  $_render_boost_devel['count'] = 0;
  $_render_boost_devel['checksum'] = 0;
  $_render_boost_devel['get'] = 0;
  $_render_boost_devel['store'] = 0;
  if ($config['enable'] && $config['debug']) {
    // Init statistics data.
    drupal_register_shutdown_function('render_boost_shutdown');
  }
}

/**
 * Implements hook_ajax_render_alter().
 *
 * Disable devel output for AJAX queries.
 */
function render_boost_ajax_render_alter() {
  $GLOBALS['render_boost_debug_shutdown'] = FALSE;
}

/**
 * Implements hook_flush_caches().
 */
function render_boost_flush_caches() {
  return array('cache_render');
}

/**
 * Internal function to measure time for devel output.
 */
function render_boost_microtime_float() {
  list($usec, $sec) = explode(' ', microtime());

  return (float) $usec + (float) $sec;
}

/**
 * Runs on shutdown to display developer information.
 *
 * Render_boost_boot() registers this function as a shutdown function.
 */
function render_boost_shutdown() {
  if (!isset($GLOBALS['render_boost_debug_shutdown']) && !drupal_is_cli()) {
    global $_render_boost_devel;

    print '<div class="dev-render">Render boost called: ' . $_render_boost_devel['count'] . '
  <span class="checksum">checksum check: <b>' . round($_render_boost_devel['checksum'] * 1000) . 'ms</b></span>
  <span class="store">cache store: <b>' . round($_render_boost_devel['store'] * 1000) . 'ms</b></span>
  <span class="get">cache get: <b>' . round($_render_boost_devel['get'] * 1000) . 'ms</b></span>
  <span class="total">Total: <b>' . round(($_render_boost_devel['checksum'] + $_render_boost_devel['store'] + $_render_boost_devel['get']) * 1000) . 'ms</b></span>
  </div>';
  }
}

/**
 * Generate checksum for render element.
 */
function render_boost_checksum($element) {
  if (empty($element)) {
    return FALSE;
  }

  global $_render_boost_devel;

  $now = render_boost_microtime_float();
  $_render_boost_devel['count']++;

  $serialize = serialize($element);
  $checksum = md5($serialize);
  $_render_boost_devel['checksum'] += (render_boost_microtime_float() - $now);

  return $checksum;
}

/**
 * Store cached data.
 */
function render_boost_store_cache($checksum, $data) {
  if (empty($data)) {
    // Do not cache empty data.
    return;
  }
  global $_render_boost_devel;
  $now = render_boost_microtime_float();
  // Construct the filepath where JS translation files are stored.
  $config = render_boost_settings();

  cache_set($checksum, $data, 'cache_render', REQUEST_TIME + $config['expire']);
  $_render_boost_devel['store'] = $_render_boost_devel['store'] + (render_boost_microtime_float() - $now);
}

function render_boost_store_checksums($checksum = NULL) {
  static $checksums = array();

  if (isset($checksum)) {
    $checksums[] = $checksum;
  }

  return $checksums;
}
/**
 * Get cache by checksum.
 */
function render_boost_get_cache($checksum) {
  global $_render_boost_devel;

  $now = render_boost_microtime_float();
  $checksums =& drupal_static(__FUNCTION__, array());

  if (isset($checksums[$checksum])) {
    return $checksums[$checksum];
  }

  $return = '';
  $cache = cache_get($checksum, 'cache_render');

  if (!empty($cache->data)) {
    render_boost_add_assets($cache->data);

    $return = "<!-- cached:$checksum -->{$cache->data['output']}<!-- /cached:$checksum -->";
  }

  $checksums[$checksum] = $return;

  render_boost_store_checksums($checksum);
  $_render_boost_devel['get'] += (render_boost_microtime_float() - $now);

  return $return;
}

/**
 * Process form states and attachments fo cached data.
 */
function render_boost_enable_forms_states_attaches($elements) {
//  if (!empty($elements['#states'])) {
//    drupal_process_states($elements);
//  }
//
//  if (!empty($elements['#attached'])) {
//    drupal_process_attached($elements);
//  }

  foreach ($elements as $key => $val) {
    if (is_array($val)) {
      render_boost_enable_forms_states_attaches($val);
    }
  }
}

/**
 * Main function. Replace drupal_render function.
 */
function render_boost_drupal_render(&$elements) {
  $output = render_boost_render($elements);
  preg_match_all('/<!-- render_boost_form:(.*?):(.*?) --\>/', $output, $matches);

  if (!empty($matches[0])) {
    $form_storage = render_boost_form_storage();

    foreach ($matches[2] as $key => $form_serial_number) {
      $rendered_element = $form_storage[$form_serial_number]['render'];
      $output = str_replace($matches[0][$key], $rendered_element, $output);
    }
  }

  return $output;
}

/**
 * Multy time used render.
 */
function render_boost_render(&$elements) {
  $empty_array = array(
    '#printed' => FALSE,
  );

  if ($elements === $empty_array) {
    return '';
  }

  if (isset($elements['#markup'])) {
    // No cache for markup.
    return render_boost_original_render($elements);
  }

  if (isset($elements['#ajax'])) {
    // No cache for markup.
    return render_boost_original_render($elements);
  }

  if (isset($elements['#type']) && $elements['#type'] == 'scripts') {
    // No cache for window.Drupal = ....
    return render_boost_original_render($elements);
  }

  if (isset($elements['#name']) && $elements['#name'] == 'form_build_id') {
    // No cache for form_build_id
    return render_boost_original_render($elements);
  }

  // Early-return nothing if user does not have access.
  if (empty($elements) || (isset($elements['#access']) && !$elements['#access'])) {
    return '';
  }

  // Do not print elements twice.
  if (!empty($elements['#printed'])) {
    return '';
  }

  if ($check_sum = render_boost_checksum($elements)) {
    $output = render_boost_get_cache($check_sum);

    if (empty($output)) {
      $scripts_before = drupal_add_js();
      $css_before = drupal_add_css();
      $output = render_boost_original_render($elements);
      $scripts_after = drupal_add_js();
      $css_after = drupal_add_css();

      if (!empty($output)) {
        $data = array();
        $data['output'] = $output;
        $scripts_keys_before = array_keys($scripts_before);
        $scripts_keys_after = array_keys($scripts_after);

        if ($diff = array_diff($scripts_keys_after, $scripts_keys_before)) {
          foreach ($diff as $key) {
            $data['js'][$key] = $scripts_after[$key];
          }
        }

        $data_keys_before = array_keys($scripts_before['settings']['data']);
        $data_keys_after = array_keys($scripts_after['settings']['data']);

        if ($diff = array_diff($data_keys_after, $data_keys_before)) {
          foreach ($diff as $key) {
            $data['setting'][$key] = $scripts_after['settings']['data'][$key];
          }
        }

        $css_keys_before = array_keys($css_before);
        $css_keys_after = array_keys($css_after);

        if ($diff = array_diff($css_keys_after, $css_keys_before)) {
          foreach ($diff as $key) {
            $data['css'][$key] = $css_after[$key];
          }
        }

        render_boost_store_cache($check_sum, $data);
      }
    }
  }
  else {
    $output = render_boost_original_render($elements);
  }

  return $output;
}

/**
 * Used by render_boost_replace_dynamic_content to get data for element by name.
 */
function render_boost_get_form_element($name, $elements) {
  if (isset($elements['#type']) && $elements['#type'] == 'form') {
    if (isset($elements[$name])) {
      return $elements[$name];
    }
  }
  else {
    foreach ($elements as $variable => $element) {
      if (is_array($element) && isset($element[$name])) {
        return $element[$name];
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Alter Performace page settings to add Render Cache settings.
 */
function render_boost_form_system_performance_settings_alter(array &$form, array &$form_state, $form_id) {
  $config = render_boost_settings();
  $period = drupal_map_assoc(array(1800, 2700, 3600, 10800, 21600, 32400, 43200, 86400), 'format_interval');

  $form['render_boost'] = array(
    '#type' => 'fieldset',
    '#title' => t('Render boost'),
    '#description' => t('Render cache helps to avoid needless re-rendering of page elements by caching results.'),
    '#tree' => TRUE,
  );

  $form['render_boost']['enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable render cache.'),
    '#default_value' => $config['enable'],
  );

  $form['render_boost']['settings'] = array(
    '#type' => 'container',
    '#states' => array(
      // Hide the query log settings when not displaying query log.
      'invisible' => array(
        'input[name="render_boost[enable]"]' => array('checked' => FALSE),
      ),
    ),
  );

  $form['render_boost']['settings']['expire'] = array(
    '#type' => 'select',
    '#title' => t('Cache expiration time'),
    '#options' => $period,
    '#default_value' => $config['expire'],
    '#description' => t('Clean cache after this period.'),
  );

  $form['render_boost']['settings']['debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable debug output.'),
    '#default_value' => $config['debug'],
  );

  $form['#submit'][] = 'render_boost_system_settings_submit';
}

/**
 * Save Render Cache settings.
 */
function render_boost_system_settings_submit(array $form, array &$form_state) {
  $config = array();
  $config['enable'] = $form_state['values']['render_boost']['enable'];
  $config['expire'] = $form_state['values']['render_boost']['settings']['expire'];
  $config['debug'] = $form_state['values']['render_boost']['settings']['debug'];

  variable_set('render_boost_settings', $config);
}

/**
 * Original drupal_render function except cache functions.
 */
function render_boost_original_render(&$elements) {
  // Early-return nothing if user does not have access.
  if (empty($elements) || (isset($elements['#access']) && !$elements['#access'])) {
    return '';
  }

  // Do not print elements twice.
  if (!empty($elements['#printed'])) {
    return '';
  }

  // If #markup is set, ensure #type is set. This allows to specify just #markup
  // on an element without setting #type.
  if (isset($elements['#markup']) && !isset($elements['#type'])) {
    $elements['#type'] = 'markup';
  }

  // If the default values for this element have not been loaded yet, populate
  // them.
  if (isset($elements['#type']) && empty($elements['#defaults_loaded'])) {
    $elements += element_info($elements['#type']);
  }

  // Make any final changes to the element before it is rendered. This means
  // that the $element or the children can be altered or corrected before the
  // element is rendered into the final text.
  if (isset($elements['#pre_render'])) {
    foreach ($elements['#pre_render'] as $function) {
      $elements = $function($elements);
    }
  }

  // Allow #pre_render to abort rendering.
  if (!empty($elements['#printed'])) {
    return '';
  }

  // Initialize this element's #children, unless a #pre_render callback already
  // preset #children.
  if (!isset($elements['#children'])) {
    $elements['#children'] = '';
  }
  // Call the element's #theme function if it is set. Then any children of the
  // element have to be rendered there.
  if (isset($elements['#theme'])) {
    $elements['#children'] = theme($elements['#theme'], $elements);
  }
  // If #theme was not set and the element has children, render them now.
  // This is the same process as drupal_render_children() but is inlined
  // for speed.
  if ($elements['#children'] == '') {
    // Get the children of the element, sorted by weight.
    foreach (element_children($elements, TRUE) as $key) {
      $elements['#children'] .= render_boost_original_render($elements[$key]);
    }
  }

  // Let the theme functions in #theme_wrappers add markup around the rendered
  // children.
  if (isset($elements['#theme_wrappers'])) {
    foreach ($elements['#theme_wrappers'] as $theme_wrapper) {
      $elements['#children'] = theme($theme_wrapper, $elements);
    }
  }

  // Filter the outputted content and make any last changes before the
  // content is sent to the browser. The changes are made on $content
  // which allows the output'ed text to be filtered.
  if (isset($elements['#post_render'])) {
    foreach ($elements['#post_render'] as $function) {
      $elements['#children'] = $function($elements['#children'], $elements);
    }
  }

  // Add any JavaScript state information associated with the element.
  if (!empty($elements['#states'])) {
    drupal_process_states($elements);
  }

  // Add additional libraries, CSS, JavaScript an other custom
  // attached data associated with this element.
  if (!empty($elements['#attached'])) {
    drupal_process_attached($elements);
  }

  $elements += array(
    '#prefix' => '',
    '#suffix' => '',
  );

  $elements['#printed'] = TRUE;

  return $elements['#prefix'] . $elements['#children'] . $elements['#suffix'];
}

function render_boost_form_storage($form_id = NULL, $form_render = NULL) {
  static $form_storage;

  if (isset($form_render)) {
    $cache = cache_get($form_id, 'cache_render');

    if (!empty($cache)) {
      $checksums =& drupal_static('render_boost_get_cache', array());
      $tmplist = array();

      // @todo Document me!
      foreach ($cache->data as $form_chksum) {
        $tmplist[$form_chksum] = $form_chksum;
      }

      foreach (cache_get_multiple($cache->data, 'cache_render') as $checksum => $subcache) {
        unset($tmplist[$checksum]);

        if (isset($checksums[$checksum])) {
          continue;
        }

        $checksums[$checksum] = $subcache->data['output'];
        render_boost_add_assets($subcache->data);
      }

      // @todo Document me!
      foreach ($tmplist as $form_chksum) {
        $checksums[$form_chksum] = '';
      }

      $form_storage[] = array(
        'elements' => $form_render,
        'render' => render_boost_original_render($form_render),
      );
    }
    else {
      // @todo Document me!
      $before = render_boost_store_checksums();
      $form_storage[] = array(
        'elements' => $form_render,
        'render' => render_boost_original_render($form_render),
      );
      $after = render_boost_store_checksums();

      if ($diff = array_diff($after, $before)) {
        $config = render_boost_settings();
        cache_set($form_id, $diff, 'cache_render', REQUEST_TIME + $config['expire']);
      }
    }

    return count($form_storage) - 1;
  }
  else {
    return $form_storage;
  }
}

/**
 * Get settings of a render boost.
 *
 * @return array
 *   Module settings.
 */
function render_boost_settings() {
  return variable_get(__FUNCTION__, array(
    'enable' => FALSE,
    'expire' => 3600,
    'debug' => FALSE,
  ));
}

/**
 * Add assets from cache data.
 *
 * @param array $data
 *   Cache data.
 */
function render_boost_add_assets(array $data) {
  foreach (array('js', 'css') as $type) {
    if (!empty($data[$type])) {
      foreach ($data[$type] as $file => $options) {
        call_user_func("drupal_add_$type", $file, $options);
      }
    }
  }

  if (!empty($data['setting'])) {
    foreach ($data['setting'] as $value) {
      drupal_add_js($value, 'setting');
    }
  }
}
